/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


#include "RF24.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1PA_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  rf24_pa_dbm_e result;
  
  (void)jenv;
  (void)jcls;
  result = (rf24_pa_dbm_e)RF24_PA_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_11MBPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  rf24_datarate_e result;
  
  (void)jenv;
  (void)jcls;
  result = (rf24_datarate_e)RF24_1MBPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1CRC_1DISABLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  rf24_crclength_e result;
  
  (void)jenv;
  (void)jcls;
  result = (rf24_crclength_e)RF24_CRC_DISABLED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_new_1RF24_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  RF24 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  result = (RF24 *)new RF24(arg1,arg2);
  *(RF24 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_new_1RF24_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  RF24 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (RF24 *)new RF24(arg1,arg2,arg3);
  *(RF24 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (bool)(arg1)->begin();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1startListening(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->startListening();
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1stopListening(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->stopListening();
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (void *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  arg3 = (uint8_t)jarg3; 
  result = (bool)(arg1)->write((void const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1available_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (bool)(arg1)->available();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jshort jarg3) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (void *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  arg3 = (uint8_t)jarg3; 
  (arg1)->read(arg2,arg3);
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1openWritingPipe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (uint8_t *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  (arg1)->openWritingPipe((uint8_t const *)arg2);
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1openReadingPipe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jbyteArray jarg3) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  {
    arg3 = (uint8_t *) jenv->GetPrimitiveArrayCritical(jarg3, 0);
  }
  (arg1)->openReadingPipe(arg2,(uint8_t const *)arg3);
  {
    jenv->ReleasePrimitiveArrayCritical(jarg3, arg3, 0);
  }
}


SWIGEXPORT jshort JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1flush_1tx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (uint8_t)(arg1)->flush_tx();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setRetries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  (arg1)->setRetries(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setChannel(arg2);
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setPayloadSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setPayloadSize(arg2);
}


SWIGEXPORT jshort JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1getPayloadSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (uint8_t)(arg1)->getPayloadSize();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1getDynamicPayloadSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (uint8_t)(arg1)->getDynamicPayloadSize();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1enableAckPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->enableAckPayload();
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1enableDynamicPayloads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->enableDynamicPayloads();
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1enableDynamicAck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->enableDynamicAck();
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1isPVariant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (bool)(arg1)->isPVariant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setAutoAck_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoAck(arg2);
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setAutoAck_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jboolean jarg3) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setAutoAck(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setPALevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setPALevel(arg2);
}


SWIGEXPORT jshort JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1getPALevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (uint8_t)(arg1)->getPALevel();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setDataRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  rf24_datarate_e arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (rf24_datarate_e)jarg2; 
  result = (bool)(arg1)->setDataRate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1getDataRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  rf24_datarate_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (rf24_datarate_e)(arg1)->getDataRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setCRCLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RF24 *arg1 = (RF24 *) 0 ;
  rf24_crclength_e arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (rf24_crclength_e)jarg2; 
  (arg1)->setCRCLength(arg2);
}


SWIGEXPORT jint JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1getCRCLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  rf24_crclength_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (rf24_crclength_e)(arg1)->getCRCLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1disableCRC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->disableCRC();
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1openWritingPipe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->openWritingPipe(arg2);
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1openReadingPipe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jobject jarg3) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  uint64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->openReadingPipe(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1printDetails(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->printDetails();
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1powerDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->powerDown();
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1powerUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->powerUp();
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jshort jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (void *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  arg3 = (uint8_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->write((void const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1writeFast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (void *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  arg3 = (uint8_t)jarg3; 
  result = (bool)(arg1)->writeFast((void const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1writeFast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jshort jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (void *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  arg3 = (uint8_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->writeFast((void const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1writeBlocking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jshort jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  uint32_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (void *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  result = (bool)(arg1)->writeBlocking((void const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1txStandBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (bool)(arg1)->txStandBy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1txStandBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (bool)(arg1)->txStandBy(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1available_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (uint8_t)0;
    arg2 = &temp2; 
  }
  result = (bool)(arg1)->available(arg2);
  jresult = (jboolean)result; 
  {
    jshort jvalue = (jshort)temp2;
    jenv->SetShortArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1startFastWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jshort jarg3, jboolean jarg4) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (void *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  arg3 = (uint8_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->startFastWrite((void const *)arg2,arg3,arg4);
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1startWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jshort jarg3, jboolean jarg4) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    arg2 = (void *) jenv->GetPrimitiveArrayCritical(jarg2, 0);
  }
  arg3 = (uint8_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->startWrite((void const *)arg2,arg3,arg4);
  {
    jenv->ReleasePrimitiveArrayCritical(jarg2, arg2, 0);
  }
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1reUseTX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  (arg1)->reUseTX();
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1writeAckPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jbyteArray jarg3, jshort jarg4) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  void *arg3 = (void *) 0 ;
  uint8_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  {
    arg3 = (void *) jenv->GetPrimitiveArrayCritical(jarg3, 0);
  }
  arg4 = (uint8_t)jarg4; 
  (arg1)->writeAckPayload(arg2,(void const *)arg3,arg4);
  {
    jenv->ReleasePrimitiveArrayCritical(jarg3, arg3, 0);
  }
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1isAckPayloadAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (bool)(arg1)->isAckPayloadAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1whatHappened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2, jbooleanArray jarg3, jbooleanArray jarg4) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool temp2 ;
  bool temp3 ;
  bool temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp3 = false;
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp4 = false;
    arg4 = &temp4; 
  }
  (arg1)->whatHappened(*arg2,*arg3,*arg4);
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jboolean jvalue = (jboolean)temp3;
    jenv->SetBooleanArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jboolean jvalue = (jboolean)temp4;
    jenv->SetBooleanArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1testCarrier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (bool)(arg1)->testCarrier();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1testRPD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (bool)(arg1)->testRPD();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1maskIRQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->maskIRQ(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_RF24_1setAddressWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RF24 **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setAddressWidth(arg2);
}


SWIGEXPORT void JNICALL Java_com_github_stanleyseow_rf24bcmjavaJNI_delete_1RF24(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RF24 **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

